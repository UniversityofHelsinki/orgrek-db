SELECT DISTINCT
	NODE.UNIQUE_ID AS UNIQUE_ID,
	CODE."VALUE" AS CODE,
	ABBREVIATION."VALUE" AS ABBREVIATION,
	TYPE."VALUE" AS TYPE,
	NAME_FI."VALUE" AS NAME_FI,
	NAME_EN."VALUE" AS NAME_EN,
	NAME_SV."VALUE" AS NAME_SV,
	PARENT.UNIQUE_ID AS PARENT
FROM EDGE
	JOIN NODE ON NODE.ID = EDGE.CHILD_NODE_ID
	JOIN NODE_ATTR CODE ON CODE."KEY" = 'oppiaine_tunnus'
		AND CODE.NODE_ID = EDGE.CHILD_NODE_ID
		AND (CODE.START_DATE IS NULL OR CODE.START_DATE <= CURRENT_DATE)
		AND (CODE.END_DATE IS NULL OR CODE.END_DATE >= CURRENT_DATE)
	JOIN NODE_ATTR TYPE ON TYPE."KEY" = 'type'
		AND TYPE.NODE_ID = EDGE.CHILD_NODE_ID 
		AND (TYPE.START_DATE IS NULL OR TYPE.START_DATE <= CURRENT_DATE)
		AND (TYPE.END_DATE IS NULL OR TYPE.END_DATE >= CURRENT_DATE)
	JOIN HIERARCHY_FILTER TYPE_FILTER ON TYPE_FILTER.HIERARCHY = EDGE.HIERARCHY
		AND TYPE_FILTER."KEY" = TYPE."KEY"
		AND TYPE_FILTER."VALUE" = TYPE."VALUE"
		AND (TYPE_FILTER.START_DATE IS NULL OR TYPE_FILTER.START_DATE <= CURRENT_DATE)
		AND (TYPE_FILTER.END_DATE IS NULL OR TYPE_FILTER.END_DATE >= CURRENT_DATE)
	LEFT JOIN NODE_ATTR ABBREVIATION ON ABBREVIATION."KEY" = 'lyhenne'
		AND ABBREVIATION.NODE_ID = EDGE.CHILD_NODE_ID
		AND TYPE."VALUE" <> 'kansio'
		AND (ABBREVIATION.START_DATE IS NULL OR ABBREVIATION.START_DATE <= CURRENT_DATE)
		AND (ABBREVIATION.END_DATE IS NULL OR ABBREVIATION.END_DATE >= CURRENT_DATE)
	JOIN NODE_ATTR NAME_FI ON NAME_FI."KEY" = 'name_fi' 
		AND NAME_FI.NODE_ID = EDGE.CHILD_NODE_ID
		AND (NAME_FI.START_DATE IS NULL OR NAME_FI.START_DATE <= CURRENT_DATE)
		AND (NAME_FI.END_DATE IS NULL OR NAME_FI.END_DATE >= CURRENT_DATE)
	JOIN NODE_ATTR NAME_EN ON NAME_EN."KEY" = 'name_en' 
		AND NAME_EN.NODE_ID = EDGE.CHILD_NODE_ID
		AND (NAME_EN.START_DATE IS NULL OR NAME_EN.START_DATE <= CURRENT_DATE)
		AND (NAME_EN.END_DATE IS NULL OR NAME_EN.END_DATE >= CURRENT_DATE)
	JOIN NODE_ATTR NAME_SV ON NAME_SV."KEY" = 'name_sv' 
		AND NAME_SV.NODE_ID = EDGE.CHILD_NODE_ID
		AND (NAME_SV.START_DATE IS NULL OR NAME_SV.START_DATE <= CURRENT_DATE)
		AND (NAME_SV.END_DATE IS NULL OR NAME_SV.END_DATE >= CURRENT_DATE)
	LEFT JOIN NODE PARENT ON EDGE.PARENT_NODE_ID IS NOT NULL
		AND PARENT.ID = EDGE.PARENT_NODE_ID
	WHERE EDGE.HIERARCHY = 'opetus'
		AND (EDGE.START_DATE IS NULL OR EDGE.START_DATE <= CURRENT_DATE)
		AND (EDGE.END_DATE IS NULL OR EDGE.END_DATE >= CURRENT_DATE)
		AND ((ABBREVIATION.ID IS NOT NULL AND TYPE."VALUE" <> 'kansio')
			OR TYPE."VALUE" = 'kansio')
